package com.jsp.footmap.controller;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import javax.websocket.*;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import java.util.concurrent.CopyOnWriteArraySet;@ServerEndpoint(value = "/websocket/{auth_token}")@Componentpublic class WebSocketServer {    private static final Logger logger = LoggerFactory.getLogger(WebSocketServer.class);    //存放每个客户端对于的MyWebSocket对象    private static CopyOnWriteArraySet<WebSocketServer> webSocketSet = new CopyOnWriteArraySet<WebSocketServer>();    //与某个客户端的连接会话，需要通过它向客户端发送数据    private Session session;    //用作客户端身份验证    private String token;    /**     * 连接成功调用     * @param session     */    @OnOpen    public void onOpen(Session session, @PathParam(value = "auth_token") String auth_token) {        try {            this.session = session;            this.token = auth_token;            //加入set中            webSocketSet.add(this);            sendMessage("连接成功!" + this.token);        } catch (Exception e){            logger.error("webSocke异常" , e);        }    }    /**     * 连接关闭时候调用的方法     */    @OnClose    public void onClose() {        //移除该session        webSocketSet.remove(this);    }    /**     * 收到客户端消息后调用     * @param message 为客户端发送过来的消息     * @param session     */    @OnMessage    public void onMessage(String message, Session session) {        System.out.println("来自客户端的消息:" + message);        try {            for (WebSocketServer item : webSocketSet) {                if (item.equals(session)) {                    item.sendMessage("我收到了你的消息!");                }            }        } catch (Exception e) {            logger.error("onMessage出现异常" , e);        }    }    /**     * 向客户端发送消息     * @param message     * @throws Exception     */    public void sendMessage(String message) throws Exception {        this.session.getBasicRemote().sendText(message);    }    /**     * 发送消息给某个客户端     * @param message     * @param auth_token cookie中的auth_token     */    public void sendMessageToUser(String message, String auth_token) {        try {            int flag = 0;            for (WebSocketServer item : webSocketSet) {                //确认客户端                if (item.token.equals(auth_token)) {                    flag = 1;                    item.sendMessage(message);                }            }            if (flag == 0) {                logger.error("未发现客户端");            }        } catch (Exception e) {            logger.error("sendMessageToUser" , e);        }    }}