package com.jsp.footmap.controller;import com.jsp.footmap.model.Record;import com.jsp.footmap.service.RecordService;import com.jsp.footmap.utils.Response;import com.jsp.footmap.utils.jsonUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Map;@Controller@RequestMapping("/record")public class RecordController {    private static final Logger logger = LoggerFactory.getLogger(RecordController.class);    @Autowired    private RecordService recordService;    @RequestMapping(path = "/updateRecord", method = {RequestMethod.POST})    @ResponseBody    public Response updateRecord(@RequestBody String jsonStr) {        try {            Map<String, String> jsonMap = jsonUtils.StrToMap(jsonStr);            String targetTime = jsonMap.get("endTime");            String remarks = jsonMap.get("remarks");            String targetPlace = jsonMap.get("targetPlace");            String beginTime = jsonMap.get("startTime");            String title = jsonMap.get("title");            if (jsonMap.get("rid") == null) {                return new Response(1, "rid不能为空");            }            int rid = Integer.parseInt(jsonMap.get("rid"));            Map<String, String> map = recordService.updateRecord(targetTime, remarks, targetPlace, beginTime, title, rid);            if (map.get("msg").equals("修改成功")) {                return new Response(0, map.get("msg"));            } else {                return new Response(1, map.get("msg"));            }        } catch (Exception e){            logger.error("updateRecord:" , e);            return new Response(1, "修改失败");        }    }    @RequestMapping(path = "/addRecord", method = {RequestMethod.POST})    @ResponseBody    public Response addRecord(@RequestBody String jsonStr, @CookieValue("auth_token") String auth_token) {        try {            Map<String, String> jsonMap = jsonUtils.StrToMap(jsonStr);            String targetTime = jsonMap.get("endTime");            String remarks = jsonMap.get("remarks");            String targetPlace = jsonMap.get("targetPlace");            String beginTime = jsonMap.get("startTime");            String title = jsonMap.get("title");            Map<String, String> map = recordService.addRecord(targetTime, remarks, targetPlace, auth_token, beginTime, title);            if (map.get("msg").equals("新增成功")) {                return new Response(0, map.get("msg"));            } else {                return new Response(1, map.get("msg"));            }        } catch (Exception e){            logger.error("addRecord:" , e);            return new Response(1, "新增失败");        }    }    /**     * todo: 延时范围？ 若目标时间距离现在过长。总不能一直运行延时吧？     * @param currentPlace     * @param auth_token     */    @RequestMapping(path = "/remindUser", method = {RequestMethod.GET})    public void remindUser(@RequestParam("currentPlace") String currentPlace, @CookieValue("auth_token") String auth_token) {        try {            WebSocketServer item = new WebSocketServer();            boolean isMatched = false;            //测试Thread.sleep是否生效            int num = 0;            //一分钟判断一次            while (!isMatched) {                isMatched = recordService.isOk(currentPlace, auth_token);                //System.out.println("num = " + ++num);                Thread.sleep(60000);            }            item.sendMessageToUser("时间地点匹配", auth_token);            item.onClose();        } catch (Exception e) {            logger.error("remindUser" , e);        }    }    @RequestMapping(path = "/getRecords", method = {RequestMethod.GET})    @ResponseBody    public Response getRecords(@CookieValue("auth_token") String auth_token) {        try {            List<Record> records = recordService.getRecord(auth_token);            return new Response<List<Record>>(0, "查询成功", records);        } catch (Exception e){            logger.error("getRecords:" , e);            return  new Response(1, "查询失败");        }    }    /**     * 完成record     * @param rid     * @return     */    @RequestMapping(path = "/finishRecord", method = {RequestMethod.GET})    @ResponseBody    public Response finishRecord(@RequestParam("rid") int rid) {        try {            recordService.finishRecord(rid);            return new Response(0, "修改成功");        } catch (Exception e){            logger.error("finishRecord:" , e);            return new Response(1, "修改失败");        }    }    /**     * 删除     * @param rid     * @return     */    @RequestMapping(path = "deleRecord", method = {RequestMethod.GET})    @ResponseBody    public Response deleRecord(@RequestParam("rid") int rid) {        try {            recordService.deleRecord(rid);            return new Response(0, "删除成功");        } catch (Exception e) {            logger.error("deleRecord:" , e);            return new Response(1,"删除失败");        }    }}