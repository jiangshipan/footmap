package com.jsp.footmap.controller;import com.jsp.footmap.model.Record;import com.jsp.footmap.service.EmailService;import com.jsp.footmap.utils.DateUtils;import com.jsp.footmap.utils.Response;import com.jsp.footmap.utils.footMapUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping("/mail")public class MailController {    private static final Logger logger = LoggerFactory.getLogger(MailController.class);    @Autowired    private JavaMailSender jms;    @Autowired    private EmailService emailService;    @Value("${spring.mail.username}")    private String username;    @RequestMapping(path = "sendCode", method = {RequestMethod.GET})    @ResponseBody    public Response sendRegisterCode(@RequestParam("email") String email) {        try {            int registerCode = footMapUtils.getFourRandom();            //添加到数据库            emailService.addEmail(email, registerCode);            //建立邮件消息            SimpleMailMessage mainMessage = new SimpleMailMessage();            //发送者            mainMessage.setFrom(username);            //接收者            mainMessage.setTo(email);            //发送的内容            mainMessage.setSubject("注册footmap账户");            mainMessage.setText("您的注册码是:" + registerCode);            jms.send(mainMessage);            return new Response(0, "成功");        } catch(Exception e) {            logger.error("sendRegisterCode:" + e.getMessage());            return new Response(0, "失败");        }    }    /**     * 提醒用户 record     * @param record     */    public void remindUser(Record record, String email) {        try {            //创建邮件消息            SimpleMailMessage mainMessage = new SimpleMailMessage();            //发送者            mainMessage.setFrom(username);            //接收方            mainMessage.setTo(email);            //发送内容            mainMessage.setSubject(record.getTitle());            mainMessage.setText("您设置的于" + DateUtils.DateToString(record.getStartTime()) + "--"                    +  DateUtils.DateToString(record.getTargetTime()) + "之间的提醒需要完成了,主要内容是:在" +                    record.getTargetPlace() + "完成" + record.getRemarks() + "。请尽快完成!");            jms.send(mainMessage);        } catch (Exception e) {            logger.error("remindUser:" + e.getMessage());        }    }    @RequestMapping(path = "checkCode", method = {RequestMethod.GET})    @ResponseBody    public Response checkRegisterCode(@RequestParam("email") String email, @RequestParam("code") String code) {        try {            int result = emailService.checkCode(email, Integer.parseInt(code));            if (result == 1) {                return new Response(0, "验证成功");            } else {                return new Response(1, "注册码验证失败");            }        } catch(Exception e) {            logger.error("checkRegisterCode:" + e.getMessage());            return new Response(1, "验证失败");        }    }    /**     * 验证邮箱是否存在并未绑定用户     * @param email     * @return     */    @RequestMapping(path = "/isExistEmail", method = {RequestMethod.GET})    @ResponseBody    public Response isExistEmail(@RequestParam("email") String email) {        try {            int result = emailService.checkEmail(email);            if (result == 1) {                return new Response(0, "邮箱可用");            } else {                return new Response(1, "邮箱已经被使用");            }        } catch (Exception e) {            logger.error("isExistEmail:" + e.getMessage());            return new Response(1, "验证失败");        }    }}