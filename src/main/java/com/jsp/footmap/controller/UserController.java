package com.jsp.footmap.controller;import com.jsp.footmap.model.User;import com.jsp.footmap.service.UserService;import com.jsp.footmap.utils.Response;import com.jsp.footmap.utils.jsonUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import java.util.Map;@Controller@RequestMapping("/user")public class UserController {    private static final Logger logger = LoggerFactory.getLogger(UserController.class);    @Autowired    private UserService userService;    /**     * 查询所有用户     * @return     */    @RequestMapping(path = {"/findAllUser"}, method = {RequestMethod.GET})    @ResponseBody    public Response<List<User>> findAllUser() {        List<User> user = userService.findAllUser();        return new Response(0, "所有用户信息", user);    }    @RequestMapping(path = {"/findUser"}, method = {RequestMethod.GET})    @ResponseBody    public Response getUser(@CookieValue("auth_token") String auth_token) {        try {            User user = userService.getUser(auth_token);            return new Response<String>(0, "获取成功", user.getNickname());        } catch (Exception e){            logger.error("getUser:" + e.getMessage());            return new Response(1, "获取失败");        }    }    /**     * 用户注册     * @return code 0: 成功，code 1失败     */    @RequestMapping(path = {"/reg"}, method = {RequestMethod.POST})    @ResponseBody    public Response userRegister(@RequestBody String jsonStr, HttpServletResponse response) {        try {            Map<String, String> jsonMap = jsonUtils.StrToMap(jsonStr);            String username = jsonMap.get("username");            String password = jsonMap.get("password");            Map<String, String > map = userService.userRegister(username, password);           // response.setHeader("Access-Control-Allow-Origin","*");            if (map.get("msg").equals("注册成功")) {                // msg为空代表 注册成功                return new Response(0, map.get("msg"));            } else {                return new Response(1, map.get("msg"));            }        } catch (Exception e) {            logger.error("userRegister:" + e.getMessage());            return new Response(1, "注册失败");        }    }    /**     * 用户登陆     * @param username     * @param password     * @return     */    @RequestMapping(path = "/login", method = {RequestMethod.GET})    @ResponseBody    public Response userLogin(@RequestParam("username") String username, @RequestParam("password") String password,                              HttpServletRequest request, HttpServletResponse response) {        try {            String ip = "";            //x-forwarded-for 防止用户通过代理修改ip            if (request.getHeader("x-forwarded-for") == null) {                ip = request.getRemoteAddr();            } else {                ip = request.getHeader("x-forwarded-for");            }            Map<String,String> map = userService.userLogin(username, password, ip);            if (map.containsKey("tokens")) {                Cookie cookie = new Cookie("auth_token", map.get("tokens"));                //同一应用服务器共享cookie                cookie.setPath("/");                response.addCookie(cookie);                return new Response(0, "登陆成功");            } else {                return new Response(1, map.get("msg"));            }        }catch (Exception e) {            logger.error("userLogin:" + e.getMessage());            return new Response(1, "登陆失败");        }    }    /**     * 用户退出     * @param token     * @return     */    @RequestMapping(path = "/logout", method = {RequestMethod.GET})    @ResponseBody    public Response userLogout(@CookieValue("auth_token") String token) {        try {            userService.logout(token);            return new Response(0, "退出成功");        } catch (Exception e) {            logger.error("userLogout:" + e.getMessage());            return new Response(1, "退出失败");        }    }}