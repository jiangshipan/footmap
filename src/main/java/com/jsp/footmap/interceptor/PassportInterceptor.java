package com.jsp.footmap.interceptor;import com.jsp.footmap.dao.TokenDao;import com.jsp.footmap.dao.UserDao;import com.jsp.footmap.model.HostHolder;import com.jsp.footmap.model.Token;import com.jsp.footmap.model.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Date;/** * 验证身份拦截器 */@Componentpublic class PassportInterceptor implements HandlerInterceptor {    @Autowired    private UserDao userDAO;    @Autowired    private TokenDao tokenDAO;    @Autowired    private HostHolder hostHolder;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        String tokens = null;        if (request.getCookies() != null) {            for (Cookie cookie : request.getCookies()) {                if (cookie.getName().equals("auth_token")) {                    tokens = cookie.getValue();                    break;                }            }        }        if (tokens != null) {            String userIp = "";            if (request.getHeader("x-forwarded-for") == null) {                userIp = request.getRemoteAddr();            } else {                userIp = request.getHeader("x-forwarded-for");            }            //user192.168.0.1            //防止tokens.indexof数组越界            if (!tokens.contains("user")) {                return true;            }            String realIp = tokens.substring(tokens.indexOf("user") + 4);            System.out.println(userIp + "---" + realIp);            if (!userIp.equals(realIp)) {                return true;            }            Token token = tokenDAO.selectByToken(tokens);            if (token == null || token.getExpired().before(new Date()) || token.getStatus() != 1) {                return true;            }            //获取该用户的信息            User user = userDAO.findUserById(token.getUid());            hostHolder.setUser(user);        }        return true;    }    //执行完controller之后，渲染视图之前调用    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {    }    //执行完请求之后调用，主要做清理工作    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {        hostHolder.clear();    }}