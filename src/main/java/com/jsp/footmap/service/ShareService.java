package com.jsp.footmap.service;import com.jsp.footmap.dao.CommentDao;import com.jsp.footmap.dao.ShareDao;import com.jsp.footmap.dao.TokenDao;import com.jsp.footmap.dao.UserDao;import com.jsp.footmap.model.*;import com.jsp.footmap.utils.DateUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.util.*;@Servicepublic class ShareService {    @Autowired    private ShareDao shareDAO;    @Autowired    private HostHolder hostHolder;    @Autowired    private UserDao userDAO;    @Autowired    private CommentDao commentDAO;    public Map<String, String> addShare(String subject, String contents) {        Map<String,String> map = new HashMap<>();        if (StringUtils.isEmpty(subject)) {            map.put("msg", "主题不能为空");            return map;        }        Share share = new Share();        share.setUid(hostHolder.getUser().getUid());        share.setSubject(subject);        share.setContents(contents);        share.setLikeCount(0);        share.setDisLikeCount(0);        share.setCommentCount(0);        //默认开启        share.setStatus(1);        share.setSendTime(new Date());        shareDAO.addShard(share);        map.put("msg","新增成功");        return map;    }    /**     * 更新点赞数     * @param sid     * @param likeCount     */    public void updateLikeCount(int sid, int likeCount, int disLikeCount) {        shareDAO.updateLikeCount(sid, likeCount, disLikeCount);    }    public List<ResponseShare> getShares() {        List<Share> shares = shareDAO.getShares();        List<ResponseShare> respShares = new ArrayList<>();        for (Share share : shares) {            ResponseShare respShare = new ResponseShare();            respShare.setSid(share.getSid());            respShare.setSubject(share.getSubject());            respShare.setContents(share.getContents());            respShare.setSendTime(share.getSendTime());            User user = userDAO.findUserById(share.getUid());            respShare.setNickname(user.getNickname());            respShare.setLikeCount(share.getLikeCount());            respShare.setDisLikeCount(share.getDisLikeCount());            respShare.setCommentCount(share.getCommentCount());            respShares.add(respShare);        }        return respShares;    }    public void addCommentCount(int sid){        shareDAO.addCommentCount(sid);    }    public ResponseDetail getDetail(int sid) {        Share share = shareDAO.getShareBySid(sid);        //根据sid查询评论        List<Comment> comments = commentDAO.getComments(sid, 1);        //根据comments获取nickname        for (Comment comment : comments) {            User user = userDAO.findUserById(comment.getUid());            comment.setNickname(user.getNickname());        }        ResponseDetail respDetail = new ResponseDetail();        respDetail.setSid(sid);        respDetail.setComments(comments);        respDetail.setSubject(share.getSubject());        respDetail.setSendTime(share.getSendTime());        User user = userDAO.findUserById(share.getUid());        respDetail.setNickname(user.getNickname());        //设置当前用户的管理权限        respDetail.setManager(hostHolder.getUser().getManager());        respDetail.setLikeCount(share.getLikeCount());        respDetail.setDisLikeCount(share.getDisLikeCount());        respDetail.setContents(share.getContents());        respDetail.setCommentCount(share.getCommentCount());        return respDetail;    }    public void deleShare(int sid) {        shareDAO.updateStatus(sid, 0);    }    /**     * 得到热点share  默认设置评论数/点赞数大于10 为热点     * @return     */    public List<HotShare> getHotShare() {        List<HotShare> hotShares = shareDAO.getHotShare(2);        return hotShares;    }}