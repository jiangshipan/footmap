package com.jsp.footmap.service;import com.jsp.footmap.dao.TokenDao;import com.jsp.footmap.dao.UserDao;import com.jsp.footmap.model.ResponseUser;import com.jsp.footmap.model.Token;import com.jsp.footmap.model.User;import com.jsp.footmap.utils.Response;import com.jsp.footmap.utils.footMapUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.util.*;@Servicepublic class UserService {    @Autowired    private UserDao userDAO;    @Autowired    private TokenDao tokenDAO;    @Autowired    private EmailService emailService;    public List<ResponseUser> findAllUser() {        List<User> allUser = userDAO.findAllUser();        List<ResponseUser> users = new ArrayList<ResponseUser>();        for (User user : allUser) {            ResponseUser responseUser = new ResponseUser();            responseUser.setUsername(user.getUsername());            responseUser.setNickname(user.getNickname());            String email = emailService.selectEmail(user.getUid());            responseUser.setEmail(email);            responseUser.setStatus(user.getStatus());            responseUser.setManager(user.getManager());            users.add(responseUser);        }        return users;    }    public Map<String, String> userRegister(String username, String password, String email) {        Map<String, String> map = new HashMap<String, String>();        if (StringUtils.isEmpty(username)) {            map.put("msg", "用户名不能为空");            return map;        }        if (StringUtils.isEmpty(password)) {            map.put("msg", "密码不能为空");            return map;        }        User user = userDAO.findUserByUsername(username);        if (user != null) {            map.put("msg", "用户名已经存在");            return map;        }        user = new User();        user.setUsername(username);        user.setSalt(UUID.randomUUID().toString().substring(0, 5));        user.setPassword(footMapUtils.MD5(password + user.getSalt()));        user.setStatus(1);        //昵称默认为空，用户可自行修改        user.setNickname("footmap用户");        //管理员在数据库端设置        user.setManager(0);        userDAO.insertUser(user);        //获取user        User user1 = userDAO.findUserByUsername(username);        //设置绑定邮箱        emailService.fixEmail(user1.getUid(), email);        map.put("msg", "注册成功");        return map;    }    public Map<String,String> userLogin(String username, String password, String ip) {        Map<String,String>  map = new HashMap<String, String>();        if (StringUtils.isEmpty(username)) {            map.put("msg", "用户名不能为空");            return map;        }        if (StringUtils.isEmpty(password)) {            map.put("msg", "密码不能为空");            return map;        }        //检查身份合法性        User user = userDAO.findUserByUsername(username);        if (!footMapUtils.MD5(password + user.getSalt()).equals(user.getPassword())) {            map.put("msg", "密码不正确");            return map;        }        if (user.getStatus() == 0) {            map.put("msg", "您的账号已经被禁用");            return map;        }        //登陆成功，下发tokens        String tokens = addLoginToken(user.getUid(), ip);        map.put("tokens", tokens);        return map;    }    /**     * 给用户下发token     * @param uid     * @return     */    public String addLoginToken(int uid, String ip) {        Token token = new Token();        token.setUid(uid);        token.setStatus(1);        token.setTokens(UUID.randomUUID().toString().replaceAll("-", "") + "user" +ip);        //设置有效期        Date date = new Date();        date.setTime(date.getTime() + 1000 * 3600 * 24);        token.setExpired(date);        tokenDAO.addToken(token);        return token.getTokens();    }    /**     * 退出     * @param token     */    public void logout(String token) {        //修改token为禁用        tokenDAO.updateTokenStatus(token, 0);    }    public User getUser(String auth_token) {        Token token = tokenDAO.selectByToken(auth_token);        int uid = token.getUid();        User user = userDAO.findUserById(uid);        return user;    }    public void updateUser(String nickname, String password, String auth_token) {        Token token = tokenDAO.selectByToken(auth_token);        User user = userDAO.findUserById(token.getUid());        user.setNickname(nickname);        user.setPassword(footMapUtils.MD5(password + user.getSalt()));        userDAO.updateUser(user);    }    public void updateStatus(String username, int status) {        userDAO.updateStatus(username, status);    }}