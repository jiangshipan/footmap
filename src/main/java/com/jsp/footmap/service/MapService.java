package com.jsp.footmap.service;import com.jsp.footmap.dao.MapDao;import com.jsp.footmap.dao.TokenDao;import com.jsp.footmap.model.ResponseMap;import com.jsp.footmap.model.Token;import com.jsp.footmap.model.UserMap;import com.jsp.footmap.utils.DateUtils;import com.jsp.footmap.utils.Response;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.util.*;@Servicepublic class MapService {    @Autowired    private TokenDao tokenDAO;    @Autowired    private MapDao mapDAO;    public Map<String, String > addCurrPlace(String currentTime, String currentPlace, String auth_token) {        Map<String, String> map = new HashMap<String, String>();        if (StringUtils.isEmpty(currentTime)) {            map.put("msg", "时间不能为空");            return map;        }        if (StringUtils.isEmpty(currentPlace)) {            map.put("msg", "地点不能为空");            return map;        }        //将String日期->Date类型        Date currentDate = DateUtils.StringToDate(currentTime);        UserMap userMap = new UserMap();        //获取用户id        Token token = tokenDAO.selectByToken(auth_token);        userMap.setUid(token.getUid());        userMap.setCurrentTime(currentDate);        userMap.setCurrentPlace(currentPlace);        mapDAO.addMap(userMap);        map.put("msg", "新增成功");        return map;    }    public Response<List<ResponseMap>> getUserMap(String selectTime, String auth_token) {        if (StringUtils.isEmpty(selectTime)) {            return new Response(1, "时间不能为空");        }        if (selectTime.length() > 10) {            return new Response(1, "时间格式不正确");        }        //获取用户id        Token token = tokenDAO.selectByToken(auth_token);        int uid = token.getUid();        Date selectDate = DateUtils.StringToDate2(selectTime);        Date nextDate = DateUtils.getNextDate(selectDate);        List<ResponseMap> userMap = mapDAO.getUserMap(uid, selectDate, nextDate);        // 之前设置数据库时区+8：00 导致返回结果少8小时。 若修改代码，服务器mysql必须设置为美国时区，同+8：00        for (ResponseMap map : userMap ) {            map.setCurrentTime(DateUtils.addEightHour(map.getCurrentTime()));        }        //对userMap进行排序，按照小->大输出        Collections.sort(userMap, new Comparator<ResponseMap>() {            @Override            public int compare(ResponseMap o1, ResponseMap o2) {                return o1.getCurrentTime().compareTo(o2.getCurrentTime());            }        });        return new Response(0, "获取成功", userMap);    }}